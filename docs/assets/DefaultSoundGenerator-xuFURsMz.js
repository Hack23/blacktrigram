var c=Object.defineProperty,d=(i,e,t)=>e in i?c(i,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):i[e]=t,u=(i,e,t)=>d(i,typeof e!="symbol"?e+"":e,t);class y{constructor(){u(this,"audioContext",null),u(this,"isInitialized",!1),this.initializeAudioContext()}initializeAudioContext(){try{const e=window.AudioContext||window.webkitAudioContext;e&&(this.audioContext=new e,this.isInitialized=!0)}catch(e){console.warn("Web Audio API not supported:",e),this.isInitialized=!1}}async resumeAudioContext(){if(this.audioContext?.state==="suspended")try{await this.audioContext.resume()}catch(e){console.warn("Failed to resume audio context:",e)}}async playTone(e){if(!(!this.audioContext||!this.isInitialized))try{await this.resumeAudioContext();const t=this.audioContext.createOscillator(),a=this.audioContext.createGain();t.connect(a),a.connect(this.audioContext.destination),t.type=e.type,t.frequency.setValueAtTime(e.frequency,this.audioContext.currentTime);const{attack:o=.01,decay:l=.1,sustain:s=.7,release:r=.3}=e.envelope||{},n=this.audioContext.currentTime;a.gain.setValueAtTime(0,n),a.gain.linearRampToValueAtTime(e.volume,n+o),a.gain.linearRampToValueAtTime(e.volume*s,n+o+l),a.gain.setValueAtTime(e.volume*s,n+e.duration-r),a.gain.linearRampToValueAtTime(0,n+e.duration),t.start(n),t.stop(n+e.duration)}catch(t){console.warn("Failed to play tone:",t)}}async playAttackSound(e){const t=Math.min(e/40,1);await this.playTone({frequency:200+t*300,duration:.15,type:"sawtooth",volume:.3+t*.4,envelope:{attack:.005,decay:.05,sustain:.8,release:.1}})}async playHitSound(e,t=!1){if(t)await this.playTone({frequency:800,duration:.2,type:"square",volume:.6,envelope:{attack:.001,decay:.02,sustain:.9,release:.177}});else{const a=Math.min(e/30,1);await this.playTone({frequency:150+a*200,duration:.12,type:"triangle",volume:.4+a*.3,envelope:{attack:.01,decay:.03,sustain:.7,release:.08}})}}async playStanceChangeSound(){await this.playTone({frequency:440,duration:.25,type:"sine",volume:.3,envelope:{attack:.05,decay:.1,sustain:.6,release:.1}})}async playComboSound(e){const t=300+e*50;await this.playTone({frequency:t,duration:.1,type:"square",volume:Math.min(.2+e*.1,.7),envelope:{attack:.01,decay:.02,sustain:.8,release:.067}})}async playMenuSound(){await this.playTone({frequency:523,duration:.1,type:"sine",volume:.3,envelope:{attack:.01,decay:.02,sustain:.7,release:.067}})}async playMatchStartSound(){await this.playTone({frequency:660,duration:1,type:"sine",volume:.5,envelope:{attack:.01,decay:.3,sustain:.5,release:.69}})}async playVictorySound(){const e=[523,659,784];for(let t=0;t<e.length;t++)setTimeout(()=>{this.playTone({frequency:e[t],duration:.3,type:"sine",volume:.4,envelope:{attack:.05,decay:.1,sustain:.8,release:.15}})},t*200)}cleanup(){this.audioContext&&(this.audioContext.close(),this.audioContext=null,this.isInitialized=!1)}}const p=new y;export{y as DefaultSoundGenerator,p as defaultSoundGenerator};
